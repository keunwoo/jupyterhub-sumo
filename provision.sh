#!/bin/bash -eux

# Main VM provisioning script.

# Usage: provision.sh [--vagrant]
#
# When --vagrant is passed, we try to run in a way that's
# vagrant-friendly.


# http://stackoverflow.com/questions/59895/can-a-bash-script-tell-what-directory-its-stored-in
thisdir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"


# Tweaks for vagrant mode.
pip3_cache_dir=/var/cache/local/pip3-cache
jupyterhub_user=jupyterhub
jupyterhub_extra_groups="${jupyterhub_user}"
vagrant=
if [[ ${1:-} == '--vagrant' ]]; then
    vagrant=1
    echo 'Hello, vagrant'
    cd /vagrant
    thisdir=/vagrant

    # Generate some starter config files & certs.
    mkdir -p run
    if ! [[ -f run/config.json ]]; then
        cp examples/vagrant-config.json run/config.json
    fi
    if ! [[ -f run/key.pem && -f run/bogus.pem ]]; then
        openssl req -x509 -sha256 -nodes -days 365 -newkey rsa:2048 \
                -keyout run/key.pem \
                -out run/cert.pem \
                -subj "/C=US/ST=MA/L=Cambridge/O=My Vagrant Boxes/CN=vagrant-wily.localhost"
    fi

    # Ensure the jupyterhub user can read vagrant's files
    jupyterhub_extra_groups="${jupyterhub_extra_groups},vagrant"

    # Use a /vagrant subdir for pip cache
    pip3_cache_dir=/vagrant/.cache/pip3

    # Use a /vagrant subdir for /var/www
    rm -Rf /var/www
    mkdir -p /vagrant/run/www
    ln -s /vagrant/run/www /var/www

    # Use a /vagrant subdir for /var/cache/apt/archives
    rm -Rf /var/cache/apt/archives
    mkdir -p /vagrant/.cache/apt
    ln -s /vagrant/.cache/apt /var/cache/apt/archives
fi


downloaddir=${thisdir}/download
scriptdir=${thisdir}/bin


config_json=${thisdir}/run/config.json
if [[ ! -f "${config_json}" ]]; then
    >&2 echo "Missing config file at ${config_json}"
    exit 1
fi
eval_template="${scriptdir}/eval_template.py ${thisdir}/run/config.json"


# Update system packages.
apt-get update
apt-get upgrade -y


# Prepare downloads directory.
sha256sum='sha256sum --check --strict --quiet'
md5sum='md5sum --check --strict --quiet'
curl='curl --insecure'
mkdir -p ${downloaddir}
! ${sha256sum} download.sha256sums >/dev/null 2>&1
initial_sha256sum_ok=$?
if [[ ${initial_sha256sum_ok} == 0 ]]; then
    for url in \
	https://3230d63b5fc54e62148e-c95ac804525aac4b6dba79b00b39d1d3.ssl.cf1.rackcdn.com/Anaconda2-2.5.0-Linux-x86_64.sh \
	https://3230d63b5fc54e62148e-c95ac804525aac4b6dba79b00b39d1d3.ssl.cf1.rackcdn.com/Anaconda3-2.5.0-Linux-x86_64.sh \
    ; do
	outpath=${downloaddir}/${url##*/}
	${curl} ${url} -o ${outpath}
    done
    ${sha256sum} download.sha256sums
fi
#
# The final md5sum check here is weaker than the sha256sum check, but
# it makes it easier to verify that we match the published sums at
#
#     https://repo.continuum.io/archive/
#
# The sha256sums were generated by hand after verifying the
# md5sums.
${md5sum} download.md5sums


# Install jupyterhub prereqs.
apt-get install -y \
        npm nodejs-legacy \
        python3-pip
npm install -g configurable-http-proxy


# Install jupyterhub itself (systemwide).
mkdir -p ${pip3_cache_dir}
pip3 install --upgrade --download-cache ${pip3_cache_dir} \
     jupyter \
     jupyterhub \
     notebook \
     oauthenticator \
     tornado \
     git+https://github.com/jupyter/sudospawner


# Set up an account that can run jupyterhub.
getent group ${jupyterhub_user} || groupadd ${jupyterhub_user}
${scriptdir}/adduser.sh ${jupyterhub_user} -G ${jupyterhub_extra_groups}
${eval_template} \
    templates/sudoers-jupyterhub \
    /etc/sudoers.d/jupyterhub
${eval_template} \
    templates/jupyterhub_config.py \
    ${thisdir}/run/jupyterhub_config.py
ln -s \
   ${thisdir}/run/jupyterhub_config.py \
   /home/${jupyterhub_user}/jupyterhub_config.py


# Install anaconda2 under a user account.
anaconda2_user=anaconda2
${scriptdir}/adduser.sh ${anaconda2_user}
su anaconda2 -c "/bin/bash ${downloaddir}/Anaconda2-2.5.0-Linux-x86_64.sh -b"
/home/${anaconda2_user}/anaconda2/bin/ipython kernel install
${scriptdir}/rename_jupyter_kernel.py \
    /usr/local/share/jupyter/kernels/python2/kernel.json \
    'Python 2 (anaconda)'


# Install anaconda3 under a user account.
anaconda3_user=anaconda3
${scriptdir}/adduser.sh ${anaconda3_user}
su anaconda3 -c "/bin/bash ${downloaddir}/Anaconda3-2.5.0-Linux-x86_64.sh -b"
/home/${anaconda3_user}/anaconda3/bin/ipython kernel install
${scriptdir}/rename_jupyter_kernel.py \
    /usr/local/share/jupyter/kernels/python3/kernel.json \
    'Python 3 (anaconda)'


# Install nginx.
apt-get install -y nginx
mkdir -p /var/www/wellknown
${eval_template} \
    templates/nginx-jupyterhub.conf \
    /etc/nginx/conf.d/jupyterhub.conf \


# Install misc tools.
apt-get install -y \
        emacs
